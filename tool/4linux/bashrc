#for my customizer linux bash setting
#bash completion for svn command
if [ -f bash_completion ]; then
  source bash_completion
fi

export EDITOR=vim
#to use vi in bash
set -o vi

export PS1='[\u@${PWD}]\$' 
HISTFILESIZE=100000
HISTSIZE=100000

#property for redhat 
export soaserver=.englab.brq.redhat.com
export soaserver1=.mw.lab.eng.brq.redhat.com
export soa43url=https://svn.devel.redhat.com/repos/jboss-soa/branches/4.3/build-tools
export soatrunkurl=https://svn.devel.redhat.com/repos/jboss-soa/trunk/build-tools
export soa42url=https://svn.devel.redhat.com/repos/jboss-soa/branches/4.2.0/build-tools
export raycom=10.66.14.114

PATH=$HOME/bin:$PATH
#alias in general pupose
alias l="ls -l -F --color"
alias ls="ls -F --color"
alias df="df -h"
alias env="env | sort"
alias diff="colordiff"
alias r="source ~/.bashrc"
alias myhelp="egrep 'alias|function .*\(' ${MY_TOOL}/bashrc"
alias brmsbin="cd brms-standalone-5.3.0/jboss-as/bin/"
alias soabin="cd jboss-soa-p-5/jboss-as/bin/"


alias "vi=vim"
alias "vim=vimx"

#alias for redhat specific
alias "vnc14=vncviewer -shared xen14$soaserver:4 -passwd ~/.vnc/xen14passwd"
alias "vnc78=vncviewer -shared xen78$soaserver:4 -passwd ~/.vnc/xen14passwd"
alias "vnc05=vncviewer -shared jawa05$soaserver:4 -passwd ~/.vnc/jawa05passwd"
alias "vncraycom=vncviewer -shared $raycom:4 -passwd ~/.vnc/raycompasswd"
alias "vncg3=vncviewer -shared jawa37g3.mw.lab.eng.brq.redhat.com:4 "
alias "vncg1=vncviewer -shared jawa37g1.mw.lab.eng.brq.redhat.com:4 -passwd ~/.vnc/g1passwd"
alias "vncg2=vncviewer -shared jawa37g2.mw.lab.eng.brq.redhat.com:4 "
alias "sshraycom=ssh rzhang@10.66.14.114"
alias "ssh14=ssh rzhang@xen14$soaserver"
alias "ssh78=ssh rzhang@xen78$soaserver"
alias "ssh05=ssh rzhang@jawa05$soaserver"
alias "sshg3=ssh rzhang@jawa37g3.mw.lab.eng.brq.redhat.com"
alias "sshg1=ssh rzhang@jawa37g1.mw.lab.eng.brq.redhat.com"
alias "sshg2=ssh rzhang@jawa37g2.mw.lab.eng.brq.redhat.com"
#xen14 don't have vimx
alias "re=mutt -H ~/bin/review.template "

alias "mvelshell=java -jar  mvel2-2.0.12.jar"


#function specfic to REDHAT
#create a fast profile
function brmsenv()
{

  #notice that error if add *whitespace* in 'BRMS53_ROOT_PATH= "brms-standalone-5.3.0"'
  BRMS53_ROOT_PATH="brms-standalone-5.3.0" 
  JBOSS_ROOT_PATH=""

  #if it is under brms 5.3 standalone path
  i=$(expr match $PWD ".*$BRMS53_ROOT_PATH")

  if [ $i -eq 0 ]; then
    echo "This is not a valid BRMS 5.3 standalone package path" && return
  else 
    JBOSS_ROOT_PATH="$(expr substr $PWD 1 $i)/jboss-as"
  fi

    FAST_PROFILE_PATH=$JBOSS_ROOT_PATH/server/fast

  #copy default proile to fast profile, delete if already existed
  [[ -d "$FAST_PROFILE_PATH" ]] && rm -rf $FAST_PROFILE_PATH
  cp -r $JBOSS_ROOT_PATH/server/default $JBOSS_ROOT_PATH/server/fast
  
  #set brms auth
  sed -i 's/#//g' $FAST_PROFILE_PATH/conf/props/brms-users.properties

  #set log, no append
  sed -i 's/name="Append" value="true"/name="Append" value="false"/g' $FAST_PROFILE_PATH/conf/jboss-log4j.xml
  
  #remove unused service and module
  echo "Remove ejb3 service"
  rm -f $FAST_PROFILE_PATH/deploy/ejb3*
  rm -f $FAST_PROFILE_PATH/deployers/ejb3-deployers-jboss-beans.xml  $FAST_PROFILE_PATH/deployers/jboss-ejb3-endpoint-deployer.jar

  echo "Remove ejb2 service"
  rm -f $FAST_PROFILE_PATH/deploy/ejb2*


  echo "Remove key generator " 
  rm -rf $FAST_PROFILE_PATH/deploy/uuid-key-generator.sar

  echo "Remove JBOSS MAIL" 
  rm -rf $FAST_PROFILE_PATH/deploy/mail-service.xml $FAST_PROFILE_PATH/deploy/mail-ra.rar

  echo "removed seam & admin-console"
  rm -rf $FAST_PROFILE_PATH/deploy/admin-console.war 
  rm -rf $FAST_PROFILE_PATH/deployers/seam.deployer $FAST_PROFILE_PATH/deployers/webbeans.deployer 

  echo "Removed xnio-deployer and xnio-provider"
  rm -rf $FAST_PROFILE_PATH/deployers/xnio.deployer  $FAST_PROFILE_PATH/deploy/xnio-provider.jar

  echo "hot deployment"
  rm -f $FAST_PROFILE_PATH/deploy/hdscanner-jboss-beans.xml

  #remove jmx console and remoting and other stuff
  echo "remove jmx console and remoting and other stuff"
  rm -rf  $FAST_PROFILE_PATH/deploy/jmx-remoting.sar
  rm -rf  $FAST_PROFILE_PATH/deploy/jmx-console.war
  rm -rf  $FAST_PROFILE_PATH/deploy/profleservice-secured.jar
  rm -rf  $FAST_PROFILE_PATH/deployers/sqlexception-service.xml
  rm -rf  $FAST_PROFILE_PATH/deployers/hibernate-deployer-jboss-beans.xml 
 
  #echo "Remove JMS service" 
  #rm -rf $FAST_PROFILE_PATH/deploy/quartz-ra.rar $FAST_PROFILE_PATH/deploy/jms-ra.rar

}

#General function 

#
function mytop()
{
  [[ -z "$1" ]] && echo "Usage: mytop <process_name>" && return
  PIDS=""
  #head -n -1 to print all but the last one
  for i in $(ps au|grep $1 |head -n -1 |awk '{print $2}');
    do PIDS+="$i,"
  done
  PIDS+="0"
  echo $PIDS
  top -p $PIDS
}

# Reverse based listing of last 10 entries. Useful for listing my downloads directory.
# Defaults to time based. Pass in args (e.g. -S for size based, -t for timestamp based).
function lt()
{
    ARGS="-S"
    while [[ "$1" == -* ]] ; do
       ARGS="$1" ; shift
    done

    [[ -z "$1" ]] && echo "Usage: lt <directory>" && return
    [[ ! -d "$1" ]] && echo "Usage: lt <directory>" && return

    ls $ARGS -l $1 |& tail -10
}

#list big file R recersive
#-s indicate put size in the first column
#-R indicate recursive
#-h indicate human readable size shown as 'M'
#sort -g means sort as number instead of alphe
function lr()
{
  ls -lhs -R $1 |egrep ".* .* .* .*M .*"|sort -g |tail 
}



#ps -C processname is useful, but it could miss process and don't have wild match function
function killit() 
{
  [[ -z "$1" ]] && echo "Usage: killit <process_name>" && return
  #use tail , or awk 'NR!=1 && ${print $1}'
  #tail -n +2 print from the second line
#  for i in $(ps -C $1 |tail -n +2 |awk '{print $1}');
  for i in $(ps au|grep $1 |head -n -1 |awk '{print $2}');
    do kill -9 $i;    echo " killed $i";
  done
  
}

function srt2lrc() 
{
  filename=$1
  echo $filename
  sed -e 's/^[0-9]\+.$/@@/g' -e 's/00:\(.*:.*\),\(.*\)[0-9] --> \(.*:.*:.*,.*\)/[\1.\2]/g' $filename |sed -e ':a;N;s/[\r\n]/ /g;ta' |sed -e 's/@@/\n/g' >${filename}.lrc
 
}

# Grep the xchatlog
function grepchatlog()
{
  usage="usage:$0 pattern target.txt "
  if [ $# -eq 0 ]; then
    echo $usage && return;
  elif [ $# -eq 1 ]; then
    #filter the useless contents
    sed -e '/has joined/d' -e '/has quit/d' -e '/has left/d' -e '/ping$/d' -e '/pong$/d' -e '/now known as/d' $1
  elif [ $# -eq 2 ]; then
    sed -e '/\~/d' -e '/\*\*\*\*/d' -e '/has joined/d' -e '/has quit/d' -e '/has left/d' -e '/ping$/d' -e '/pong$/d' -e '/now known as/d' $2 |grep $1
  fi
}

#start vnc server use port 4
function vncstart() 
{
  if [[ "$1" == '' ]] ; then
    RESOLUTION=1680x1000
  else
    RESOLUTION=$1
  fi

  vncserver -geometry $RESOLUTION :4
  #vncserver -geometry 1280x800
  
}

function vncstop() 
{
  vncserver -kill :4 
}

#check the frequent used command
function topcmd() 
{
  history | awk '{print $2}' | awk 'BEGIN {FS="|"} {print $1}'|sort|uniq -c | sort -n | tail | sort -nr
}


#git and svn function
# Recursive git implementation.
function rgit()
{
    (( $# == 0 )) && echo "Usage: $0 <git-cmd> ... [Run git command recursively over subdirs]" && return 1

    setopt LOCAL_OPTIONS NO_ALL_EXPORT NO_AUTO_PUSHD

    local cwd=`pwd`

    for i in `find . -type d -name .git | sort`
    do
        local d=`dirname $i | sed 's/\.\///'`
        echo "### -> $d"

        cd $d
        git $*
        cd $cwd
    done
}


